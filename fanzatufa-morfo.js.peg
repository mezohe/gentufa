{
  var stressed_vowels = {
    a: "à", e: "è", i: "ì", o: "ò", u: "ù",
    ai: "ài", ei: "èi", oi: "òi", au: "àu",
  }
  function truthy(val) {
    return val && (!Array.isArray(val) || val.length);
  }
  function join(array) {
    if (!Array.isArray(array)) return array;
    return array.filter(truthy).map(join).join("");
  }
  function concat(left, right) {
    return left.concat(right);
  }
}

// LOhU LEhU
// ZOI
// MUhOI
// LOhAI SAhAI LEhAI
// ZOhOI
// MEhOI
// GOhOI
// FAhO
// Y

text = space? w:clause* { return w }

clause = w:word t:(zei_tail / bu_tail)* { return truthy(t) ? {selmaho: t[t.length-1].selmaho, word: w.word + " " + t.map(t => t.word).join(" ")} : w}

zei_tail = &(z e i word_break) z:cmavo w:word { return {selmaho: "GOhA", word: z.word + " " + w.word} }
bu_tail = &(b u word_break) b:cmavo { return {selmaho: "BY", word: b.word} }

word = cmevo / quote / cmavo / brivo

quote = zo_clause

zo_clause = &(z o word_break) z:cmavo w:word { return {selmaho: "KOhA", word: z.word + " " + w.word} }

cmevo = !h head:(h / consonant !glide !pause !h / glide / nucleus)* tail:consonant pause dot:(!(vowel / cmevo) {return "."})? { return {selmaho: "cmevla", word: "." + join(head) + tail + (dot || "")} }

cmavo = !CVCy_lujvo start_dot:(!onset {return "."})? end_dot:(&y_dot {return "."})? head:cmavo_head tail:cmavo_tail* word_break { return {selmaho: "cmavo", word: (start_dot || "") + head + join(tail) + (end_dot || "")} }
cmavo_head = &(!h !cluster onset? cmavo_nucleus syllable_break) s:syllable &cmavo_continuation { return s }
cmavo_tail = &(h cmavo_nucleus syllable_break) s:syllable &cmavo_continuation { return s }
cmavo_continuation = cmavo_tail / word_break
cmavo_nucleus = !stressed_vowel nucleus / nucleus !cluster
CVCy_lujvo = onset? nucleus medial_syllable (brivo / medial_syllable* brivo_tail_syllable)
y_dot = onset? (nucleus h)* y word_break (cmevo / !y_dot y_then_vowel)
y_then_vowel = onset vowel / onset y coda? y_then_vowel

brivo = !h dot:(&(slinkuhi / !onset) {return "."})? head:brivo_head? tail:brivo_tail word_break { return {selmaho: "brivla", word: (dot || "") + (head || "") + tail} }
brivo_head = a:brivo_head_syllable b:unstressed_syllable* { return a + join(b) }
brivo_tail = a:stressed_syllable b:medial_syllable* c:brivo_tail_syllable { return a + join(b) + c }

brivo_head_syllable = &(onset? unstressed_vowel) s:syllable { return s }
unstressed_syllable = &(onset? !stressed_vowel) s:syllable { return s }
medial_syllable = &(onset !vowel) s:syllable { return s }
brivo_tail_syllable = &(onset nucleus syllable_break) s:syllable { return s }

slinkuhi = &(cluster vowel) syllable h y syllable / !rafsi_string consonant rafsi_string
rafsi_string = rafsi_prefix / rafsi_whole
rafsi_prefix = raf:y_rafsi { return [join(raf)] } / raf:y_less_rafsi rest:rafsi_prefix { return [join(raf)].concat(rest) }
rafsi_whole = raf:(final_rafsi / gismu) word_break { return raf } / raf:unstressed_y_less_rafsi rest:rafsi_whole { return [join(raf)].concat(rest) }
vowel_final_rafsi_tail = consonant pure_vowel !coda / diphthong hyphen? !coda / pure_vowel h pure_vowel hyphen? !coda
hyphen = r &consonant / n &r
y_less_rafsi = &syllable consonant (vowel_final_rafsi_tail / pure_vowel consonant)
y_rafsi = &syllable consonant (gismu_form_tail (pure_vowel h)? y / vowel_final_rafsi_tail h y / pure_vowel consonant y) &syllable

unstressed_y_less_rafsi = !rafsi_stress y_less_rafsi
final_rafsi = a:(consonant &stressed_vowel pure_vowel h pure_vowel &word_break) { return [join(a)] } / &rafsi_stress a:y_less_rafsi !rafsi_stress b:y_less_rafsi &word_break { return [join(a), join(b)] }
rafsi_stress = initial (stressed_vowel / vowel h stressed_vowel)
gismu = a:(&syllable (consonant consonant &stressed_vowel pure_vowel / consonant &stressed_vowel pure_vowel consonant) consonant pure_vowel) { return join(a) }
gismu_form_tail = (consonant pure_vowel / pure_vowel consonant) consonant
final_CVV_CCV = consonant &unstressed_vowel diphthong / &initial consonant consonant &unstressed_vowel pure_vowel

syllable = expr:(onset_consonantal nucleus_consonantal coda / onset? nucleus coda?) { return join(expr) }
onset = h / glide / initial
nucleus = vowel / y
coda = !syllable c:consonant !glide &syllable_break { return c }
stressed_syllable = expr:(onset? stressed_vowel coda?) { return join(expr) }

onset_consonantal = expr:(affricate / liquid / other (liquid &coda / &coda) / sibilant (other liquid &coda / liquid &coda / other &coda)?) { return join(expr) }
nucleus_consonantal = &syllabic &coda { return "y" }

syllable_break = &onset &syllable / &space / !.
word_break = syllable_break (space / &(!slinkuhi word) / !.) { return null }
space = (!letter .)+ { return null }
pause = space / !.
letter = [A-Za-z'àèìòùỳáéíóúýÀÈÌÒÙỲÁÉÍÓÚÝĭŭĬŬ]

cluster = consonant consonant+
initial = expr:(affricate !h / !nucleus sibilant? other? liquid? !h) { return join(expr) }

affricate = expr:(t c / t s / d j / d z) { return join(expr) }
sibilant = expr:(c / s !x / (j / z) !(!coda (n / liquid))) { return join(expr) }
liquid = l / r
other = expr:(p / t !(!coda l) / k / f / x / b / d !(!coda l) / g / v / m / n !(!coda liquid)) { return join(expr) }

consonant = c:(voiced / unvoiced / syllabic) !h { return c }
syllabic = l / m / n / r
voiced = b / d / g / j / v / z
unvoiced = c / f / k / p / s / t / x

b = [Bb] !b !unvoiced           { return "b" }
c = [Cc] !c !voiced !sibilant   { return "c" }
d = [Dd] !d !unvoiced           { return "d" }
f = [Ff] !f !voiced             { return "f" }
g = [Gg] !g !unvoiced           { return "g" }
h = [Hh'] !h &nucleus           { return "'" }
j = [Jj] !j !unvoiced !sibilant { return "j" }
k = [Kk] !k !voiced             { return "k" }
l = [Ll] !l                     { return "l" }
m = [Mm] !m                     { return "m" }
n = [Nn] !n !affricate          { return "n" }
p = [Pp] !p !voiced             { return "p" }
r = [Rr] !r                     { return "r" }
s = [Ss] !s !voiced !sibilant   { return "s" }
t = [Tt] !t !voiced             { return "t" }
v = [Vv] !v !unvoiced           { return "v" }
x = [Xx] !x !voiced             { return "x" }
z = [Zz] !z !unvoiced !sibilant { return "z" }

glide = iy / uy
iy = [iĭIĬ] &nucleus !glide { return "ĭ" }
uy = [uŭUŬ] &nucleus !glide { return "ŭ" }

nucleus = vowel / y
vowel = diphthong / pure_vowel
diphthong = d:(a i / e i / o i) !nucleus !iy { return join(d) } / a u !nucleus !uy { return "au" }
pure_vowel = v:(a / e / i / o / u) !nucleus { return v }
stressed_vowel = ![aeiou] v:vowel { return v } / v:vowel &stress { return v }
unstressed_vowel = &[aeiou] v:vowel !stress { return v }
stress = coda? medial_syllable* brivo_tail_syllable pause

a = [AaàáÀÁ] { return "a" }
e = [EeèéÈÉ] { return "e" }
i = [IiìíÌÍ] { return "i" }
o = [OoòóÒÓ] { return "o" }
u = [UuùúÙÚ] { return "u" }
y = [YyỳýỲÝ] !(!y nucleus) { return "y" }

{
	function _elid(selma, word) {
		if (word && typeof word == "string") return word;
		return { word: selma.toUpperCase(), structure: selma.toUpperCase(), elided: true }
	}
}

utterance = (!(GE) ((!(PAUSE) freemod2 (period)? utterance) / (!(PAUSE) freemod2 (period)? !(.)) / (uttE IGE utterance) / (I (freemod2)? (period)? !(.)) / (uttF !(.)) / (I (freemod)? uttF !(.)) / (ICA (freemod)? uttF !(.))))


_Grammar = (_Spacing (_Definition)+ _EndOfFile)

_Definition = (_Identifier _LEFTARROW _Expression)

_Expression = (_Sequence ((_SLASH _Sequence))*)

_Sequence = (_Prefix)*

_Prefix = (((_AND / _NOT))? _Suffix)

_Suffix = (_Primary ((_QUESTION / _STAR / _PLUS))?)

_Primary = ((_Identifier !(_LEFTARROW)) / (_OPEN _Expression _CLOSE) / _Literal / _Class / _DOT)

_Identifier = (_IdentStart (_IdentCont)* _Spacing)

_IdentStart = [a-zA-Z_]

_IdentCont = (_IdentStart / [0-9])

_Literal = (([\'] ((!([\']) _Char))* [\'] _Spacing) / ([\"] ((!([\"]) _Char))* [\"] _Spacing))

_Class = ([\[] ((!([\]]) _Range))* [\]] _Spacing)

_Range = ((_Char [-] _Char) / _Char)

_Char = (([\\] [nrt\'\"\[\]\\]) / ([\\] [0-2] [0-7] [0-7]) / ([\\] [0-7] ([0-7])?) / (!([\\]) .))

_LEFTARROW = ('=' _Spacing)

_SLASH = ('/' _Spacing)

_AND = ('&' _Spacing)

_NOT = ('!' _Spacing)

_QUESTION = ('?' _Spacing)

_STAR = ('*' _Spacing)

_PLUS = ('+' _Spacing)

_OPEN = ('(' _Spacing)

_CLOSE = (')' _Spacing)

_DOT = ('.' _Spacing)

_Spacing = ((_Space / _Comment))*

_Comment = ([#] ((!(_EndOfLine) .))* _EndOfLine)

_Space = ([ ] / [\t] / _EndOfLine)

_EndOfLine = (([\r] [\n]) / [\r] / [\n])

_EndOfFile = !(.)

lowercase = (!([qwx]) [a-z])

uppercase = (!([QWX]) [A-Z])

letter = (!([QWXqwx]) [A-Za-z])

juncture = (([-] &(letter)) / ([\'*] !(juncture))) { return null }

juncture2 = ((([-] &(letter)) / ([\'*] !((([ ])* Predicate)) ((', ' ([ ])* &(Predicate)))?)) !(juncture)) { return null }

Lowercase = (lowercase / juncture)

Letter = (letter / juncture)

comma = ([,] ([ ])+ &(letter)) { return "," }

comma2 = (([,])? ([ ])+ &(letter)) { return "," }

period = ([!.:;?] (!(.) / (([ ])+ &(letter)))) { return "." }

B = [Bb]

C = [Cc]

D = [Dd]

F = [Ff]

G = [Gg]

H = [Hh]

J = [Jj]

K = [Kk]

L = [Ll]

M = [Mm]

N = [Nn]

P = [Pp]

R = [Rr]

S = [Ss]

T = [Tt]

V = [Vv]

Z = [Zz]

a = ([Aa] (juncture2)?)

e = ([Ee] (juncture2)?)

i = ([Ii] (juncture2)?)

o = ([Oo] (juncture2)?)

u = ([Uu] (juncture2)?)

AA = ([Aa] (juncture)? [a] (juncture2)?)

AE = ([Aa] (juncture)? [e] (juncture2)?)

AI = ([Aa] [i] (juncture2)?)

AO = ([Aa] [o] (juncture2)?)

AU = ([Aa] (juncture)? [u] (juncture2)?)

EA = ([Ee] (juncture)? [a] (juncture2)?)

EE = ([Ee] (juncture)? [e] (juncture2)?)

EI = ([Ee] [i] (juncture2)?)

EO = ([Ee] (juncture)? [o] (juncture2)?)

EU = ([Ee] (juncture)? [u] (juncture2)?)

IA = ([Ii] (juncture)? [a] (juncture2)?)

IE = ([Ii] (juncture)? [e] (juncture2)?)

II = ([Ii] (juncture)? [i] (juncture2)?)

IO = ([Ii] (juncture)? [o] (juncture2)?)

IU = ([Ii] (juncture)? [u] (juncture2)?)

OA = ([Oo] (juncture)? [a] (juncture2)?)

OE = ([Oo] (juncture)? [e] (juncture2)?)

OI = ([Oo] [i] (juncture2)?)

OO = ([Oo] (juncture)? [o] (juncture2)?)

OU = ([Oo] (juncture)? [u] (juncture2)?)

UA = ([Uu] (juncture)? [a] (juncture2)?)

UE = ([Uu] (juncture)? [e] (juncture2)?)

UI = ([Uu] (juncture)? [i] (juncture2)?)

UO = ([Uu] (juncture)? [o] (juncture2)?)

UU = ([Uu] (juncture)? [u] (juncture2)?)

V1 = [AEIOUYaeiouy]

V2 = [AEIOUaeiou]

C1 = (!(V1) letter)

Mono = (([Aa] [o]) / (V2 [i]) / ([Ii] V2) / ([Uu] V2))

EMono = (([Aa] [o]) / ([AEOaeo] [i]))

NextVowels = (EMono / (V2 &(EMono)) / Mono / V2)

BrokenMono = (([a] juncture [o]) / ([aeo] juncture [i]))

CVVSyll = (C1 Mono)

LWunit = (((CVVSyll (juncture)? V2) / (C1 !(BrokenMono) V2 (juncture)? V2) / ([Zz] 'iy' (juncture)? ('ma')?) / (C1 V2)) (juncture2)?)

LW1 = (((V2 V2) / (C1 !(BrokenMono) V2 (juncture)? V2) / (C1 V2)) (juncture)?)

caprule = ((uppercase / lowercase) ((lowercase / juncture))* !(letter))

InitialCC = ('bl' / 'br' / 'ck' / 'cl' / 'cm' / 'cn' / 'cp' / 'cr' / 'ct' / 'dj' / 'dr' / 'dz' / 'fl' / 'fr' / 'gl' / 'gr' / 'jm' / 'kl' / 'kr' / 'mr' / 'pl' / 'pr' / 'sk' / 'sl' / 'sm' / 'sn' / 'sp' / 'sr' / 'st' / 'tc' / 'tr' / 'ts' / 'vl' / 'vr' / 'zb' / 'zv' / 'zl' / 'sv' / 'Bl' / 'Br' / 'Ck' / 'Cl' / 'Cm' / 'Cn' / 'Cp' / 'Cr' / 'Ct' / 'Dj' / 'Dr' / 'Dz' / 'Fl' / 'Fr' / 'Gl' / 'Gr' / 'Jm' / 'Kl' / 'Kr' / 'Mr' / 'Pl' / 'Pr' / 'Sk' / 'Sl' / 'Sm' / 'Sn' / 'Sp' / 'Sr' / 'St' / 'Tc' / 'Tr' / 'Ts' / 'Vl' / 'Vr' / 'Zb' / 'Zv' / 'Zl' / 'Sv')

MaybeInitialCC = (([Bb] (juncture)? [l]) / ([Bb] (juncture)? [r]) / ([Cc] (juncture)? [k]) / ([Cc] (juncture)? [l]) / ([Cc] (juncture)? [m]) / ([Cc] (juncture)? [n]) / ([Cc] (juncture)? [p]) / ([Cc] (juncture)? [r]) / ([Cc] (juncture)? [t]) / ([Dd] (juncture)? [j]) / ([Dd] (juncture)? [r]) / ([Dd] (juncture)? [z]) / ([Ff] (juncture)? [l]) / ([Ff] (juncture)? [r]) / ([Gg] (juncture)? [l]) / ([Gg] (juncture)? [r]) / ([Jj] (juncture)? [m]) / ([Kk] (juncture)? [l]) / ([Kk] (juncture)? [r]) / ([Mm] (juncture)? [r]) / ([Pp] (juncture)? [l]) / ([Pp] (juncture)? [r]) / ([Ss] (juncture)? [k]) / ([Ss] (juncture)? [l]) / ([Ss] (juncture)? [m]) / ([Ss] (juncture)? [n]) / ([Ss] (juncture)? [p]) / ([Ss] (juncture)? [r]) / ([Ss] (juncture)? [t]) / ([Tt] (juncture)? [c]) / ([Tt] (juncture)? [r]) / ([Tt] (juncture)? [s]) / ([Vv] (juncture)? [l]) / ([Vv] (juncture)? [r]) / ([Zz] (juncture)? [b]) / ([Zz] (juncture)? [v]) / ([Zz] (juncture)? [l]) / ([Ss] (juncture)? [v]))

NonmedialCC = (([b] (juncture)? [b]) / ([c] (juncture)? [c]) / ([d] (juncture)? [d]) / ([f] (juncture)? [f]) / ([g] (juncture)? [g]) / ([h] (juncture)? [h]) / ([j] (juncture)? [j]) / ([k] (juncture)? [k]) / ([l] (juncture)? [l]) / ([m] (juncture)? [m]) / ([n] (juncture)? [n]) / ([p] (juncture)? [p]) / ([q] (juncture)? [q]) / ([r] (juncture)? [r]) / ([s] (juncture)? [s]) / ([t] (juncture)? [t]) / ([v] (juncture)? [v]) / ([z] (juncture)? [z]) / ([h] (juncture)? C1) / ([cjsz] (juncture)? [cjsz]) / ([f] (juncture)? [v]) / ([k] (juncture)? [g]) / ([p] (juncture)? [b]) / ([t] (juncture)? [d]) / ([fkpt] (juncture)? [jz]) / ([b] (juncture)? [j]) / ([s] (juncture)? [b]))

NonjointCCC = (([c] (juncture)? [d] (juncture)? [z]) / ([c] (juncture)? [v] (juncture)? [l]) / ([n] (juncture)? [d] (juncture)? [j]) / ([n] (juncture)? [d] (juncture)? [z]) / ([d] (juncture)? [c] (juncture)? [m]) / ([d] (juncture)? [c] (juncture)? [t]) / ([d] (juncture)? [t] (juncture)? [s]) / ([p] (juncture)? [d] (juncture)? [z]) / ([g] (juncture)? [t] (juncture)? [s]) / ([g] (juncture)? [z] (juncture)? [b]) / ([s] (juncture)? [v] (juncture)? [l]) / ([j] (juncture)? [d] (juncture)? [j]) / ([j] (juncture)? [t] (juncture)? [c]) / ([j] (juncture)? [t] (juncture)? [s]) / ([j] (juncture)? [v] (juncture)? [r]) / ([t] (juncture)? [v] (juncture)? [l]) / ([k] (juncture)? [d] (juncture)? [z]) / ([v] (juncture)? [t] (juncture)? [s]) / ([m] (juncture)? [z] (juncture)? [b]))

RepeatedVowel = (([Aa] (juncture)? [a]) / ([Ee] (juncture)? [e]) / ([Oo] (juncture)? [o]) / ([Ii] juncture [i]) / ([Uu] juncture [u]))

RepeatedVocalic = (([Mm] [m]) / ([Nn] [n]) / ([Ll] [l]) / ([Rr] [r]))

Syllabic = [lmnr]

Nonsyllabic = (!(Syllabic) C1)

Badfinalpair = (Nonsyllabic !('mr') !(RepeatedVocalic) Syllabic !((V2 / [y] / RepeatedVocalic)))

FirstConsonants = (((!((C1 C1 RepeatedVocalic)) &(InitialCC) (C1 InitialCC)) / (!((C1 RepeatedVocalic)) InitialCC) / ((!(RepeatedVocalic) C1) !([y]))) !(juncture))

FirstConsonants2 = (((!((C1 C1 RepeatedVocalic)) &(InitialCC) (C1 InitialCC)) / (!((C1 RepeatedVocalic)) InitialCC) / (!(RepeatedVocalic) C1)) !(juncture))

VowelSegment = ((NextVowels !(RepeatedVocalic)) / RepeatedVocalic)

VowelSegment2 = (NextVowels / RepeatedVocalic)

Syllable = (((FirstConsonants)? !(RepeatedVowel) !((&(Mono) V2 RepeatedVowel)) VowelSegment !(Badfinalpair) (FinalConsonant)? (FinalConsonant)?) (juncture)?)

JunctureFix = (((FirstConsonants)? V2 juncture &(InitialCC) (!(C1) RepeatedVocalic)) / ((FirstConsonants)? VowelSegment C1 !(InitialCC) &(MaybeInitialCC)))

SyllableFinal1 = ((FirstConsonants)? !(RepeatedVocalic) VowelSegment !([\'*]) ([-])? (&(Syllable) / &([y]) / !(Letter)))

SyllableFinal2 = ((FirstConsonants)? !(RepeatedVocalic) VowelSegment (juncture)? (&([y]) / !(Letter)))

SyllableFinal2a = ((FirstConsonants)? !(RepeatedVocalic) VowelSegment (juncture)? (&([y]) / !(Letter)))

SyllableFinal2b = ((FirstConsonants)? !(RepeatedVocalic) VowelSegment [\'*] (&([y]) / !(Letter)))

StressedSyllable = (((FirstConsonants)? !(RepeatedVowel) !((&(Mono) V2 RepeatedVowel)) VowelSegment !(Badfinalpair) (FinalConsonant)? (FinalConsonant)?) [\'*])

FinalConsonant = (!(NonmedialCC) !(NonjointCCC) !(Syllable) C1 !((juncture V2)))

Syllable2 = (((FirstConsonants2)? (VowelSegment2 / [y]) !(Badfinalpair) (FinalConsonant2)? (FinalConsonant2)?) (juncture)?)

FinalConsonant2 = (!(NonmedialCC) !(NonjointCCC) !(Syllable2) C1 !((juncture V2)))

Name = (([ ])* &(((uppercase / lowercase) ((!((C1 ([\'*])? !(Letter))) Lowercase))* C1 ([\'*])? !(Letter) (!(.) / comma / &(period) / &(Name) / &(CI)))) ((Syllable2)+ (!(.) / comma / &(period) / &(Name) / &(CI))))

CCSyllableB = (((FirstConsonants)? RepeatedVocalic !(Badfinalpair) (FinalConsonant)? (FinalConsonant)?) (juncture)?)

BorrowingTail = ((!(JunctureFix) !(CCSyllableB) StressedSyllable ((!(StressedSyllable) CCSyllableB))? !(StressedSyllable) SyllableFinal1) / (!(CCSyllableB) !(JunctureFix) Syllable ((!(StressedSyllable) CCSyllableB))? !(StressedSyllable) SyllableFinal2))

PreBorrowing = (((!(BorrowingTail) !(StressedSyllable) !(JunctureFix) !((CCSyllableB CCSyllableB)) Syllable))* !(CCSyllableB) BorrowingTail)

HasCCPair = ((((C1)? ((V2 (juncture)?))+ !(Borrowing)))? !((!(InitialCC) MaybeInitialCC)) C1 (juncture)? C1)

CVCBreak = (C1 V2 (juncture)? &(MaybeInitialCC) C1 (juncture)? &((PreComplex / ComplexTail)))

CCVV = ((&(BorrowingTail) C1 C1 V2 [\'*] V2) / (&(BorrowingTail) C1 C1 V2 (juncture)? V2 (!(Letter) / ((juncture)? [y]))))

Borrowing = (!(CVCBreak) !(CCVV) &(HasCCPair) !((V2 (juncture)? MaybeInitialCC V2)) !(CCSyllableB) (((!(BorrowingTail) !(StressedSyllable) !(JunctureFix) Syllable))* !(CCSyllableB) BorrowingTail))

PreBorrowingAffix = ((((!(StressedSyllable) !(SyllableFinal2a) !(JunctureFix) !((CCSyllableB CCSyllableB)) Syllable))+ SyllableFinal2a) (juncture)? [y] ([-])? (([ ,] ([ ])*))?)

BorrowingAffix = (!(CVCBreak) !(CCVV) &(HasCCPair) !((V2 (juncture)? MaybeInitialCC V2)) !(CCSyllableB) (((!(StressedSyllable) !(SyllableFinal2a) !(JunctureFix) Syllable))+ SyllableFinal2a) (juncture)? [y] ([-])? (comma)?)

StressedBorrowingAffix = (!(CVCBreak) !(CCVV) &(HasCCPair) !((V2 (juncture)? MaybeInitialCC V2)) !(CCSyllableB) (((!(StressedSyllable) !(SyllableFinal2a) !(JunctureFix) Syllable))* SyllableFinal2b) (juncture)? [y] ([-])? !([,]))

yhyphen = ((juncture)? [y] !([\'*]) ([-])? !([y]) &(letter))

CV = ((C1 V2 !(V2)) !([\'*]) ([-])?)

Cfinal = ((C1 yhyphen) / (!(NonmedialCC) !(NonjointCCC) C1 !(((juncture)? V2))))

hyphen = (!(NonmedialCC) !(NonjointCCC) (([r] !(((juncture)? [r])) !(((juncture)? V2))) / ([n] (juncture)? &([r])) / ((juncture)? [y] !([\'*]))) ((juncture)? &(letter)) !(((juncture)? [y])))

StressedSyllable2 = (((FirstConsonants)? VowelSegment !(Badfinalpair) FinalConsonant (FinalConsonant)?) [\'*])

CVVStressed = (((C1 &(RepeatedVowel) V2 !([\'*]) ([-])? !(RepeatedVowel) V2 (hyphen)?) (([\'*] / juncture))?) / (C1 !(BrokenMono) V2 [-] V2 [\'*]) / (C1 !(Mono) V2 V2 [\'*]))

CVV = (!((C1 V2 [\'*] V2 [\'*])) ((C1 !(BrokenMono) V2 (juncture)? !(RepeatedVowel) V2 (hyphen)?) (juncture)?))

CVVFinal1 = (C1 !(BrokenMono) V2 [\'*] V2 ([-])?)

CVVFinal2 = (((C1 !(Mono) V2 V2) / (C1 !(BrokenMono) V2 juncture V2)) !(Letter))

CVVFinal5 = (((C1 !(Mono) V2 V2) / (C1 !(BrokenMono) V2 juncture V2)) &(((juncture)? [y])))

CVVFinal3 = (C1 Mono !([\'*]) ([-])?)

CVVFinal4 = (C1 Mono !(Letter))

CVC = ((C1 V2 Cfinal) (juncture)?)

CVCStressed = (C1 V2 !(NonmedialCC) !(NonjointCCC) C1 [\'*] (yhyphen)?)

CCV = (InitialCC !(RepeatedVowel) V2 (yhyphen)? (juncture)?)

CCVStressed = (InitialCC !(RepeatedVowel) V2 [\'*])

CCVFinal1 = (InitialCC !(RepeatedVowel) V2 !([\'*]) ([-])?)

CCVFinal2 = (InitialCC V2 !(Letter))

CCVCVMedial = (CCV C1 [y] ([-])? &(letter))

CCVCVMedialStressed = (CCV [\'*] C1 [y] ([-])? &(letter))

CCVCVFinal1 = (InitialCC V2 [\'*] CV)

CCVCVFinal2 = (InitialCC V2 (juncture)? CV !(Letter))

CVCCVMedial = (C1 V2 ((juncture &(InitialCC)))? !(NonmedialCC) C1 (juncture)? C1 [y] ([-])? &(letter))

CVCCVMedialStressed = ((C1 V2 ([\'*] &(InitialCC)) !(NonmedialCC) C1 C1 [y] ([-])? &(letter)) / (C1 V2 !(NonmedialCC) C1 [\'*] C1 [y] ([-])? &(letter)))

CVCCVFinal1a = (C1 V2 [\'*] InitialCC V2 ([-])?)

CVCCVFinal1b = (C1 V2 !(NonmedialCC) C1 [\'*] CV)

CVCCVFinal2 = (C1 V2 ((juncture &(InitialCC)))? !(NonmedialCC) C1 (juncture)? CV !(Letter))

GenericFinal = (CVVFinal3 / CVVFinal4 / CCVFinal1 / CCVFinal2)

GenericTerminalFinal = (CVVFinal4 / CCVFinal2)

Affix1 = (CCVCVMedial / CVCCVMedial / CCV / CVV / CVC)

Peelable = (&(PreBorrowingAffix) !(CVVFinal1) !(CVVFinal5) Affix1 (!(Affix1) / &((&(PreBorrowingAffix) !(CVVFinal1) !(CVVFinal5) Affix1 !(PreBorrowingAffix) !(Affix1))) / Peelable))

FiveLetterFinal = (CCVCVFinal1 / CCVCVFinal2 / CVCCVFinal1a / CVCCVFinal1b / CVCCVFinal2)

Peelable2 = (&(PreBorrowing) !(CVVFinal1) !(CVVFinal2) !(CVVFinal5) !(FiveLetterFinal) Affix1 !(FiveLetterFinal) (!(Affix1) / &((&(PreBorrowing) !(FiveLetterFinal) !(CVVFinal1) !(CVVFinal2) !(CVVFinal5) Affix1 !(PreBorrowing) !(FiveLetterFinal) !(Affix1))) / Peelable2))

Affix = ((!(Peelable) !(Peelable2) Affix1) / BorrowingAffix)

Affix2 = (!(StressedSyllable2) !(CVVStressed) Affix)

ComplexTail = ((Affix GenericTerminalFinal) / (!((!(Peelable) Affix1)) StressedBorrowingAffix GenericFinal) / (CCVCVMedialStressed GenericFinal) / (CVCCVMedialStressed GenericFinal) / (CCVStressed GenericFinal) / (CVCStressed GenericFinal) / (CVVStressed GenericFinal) / (Affix2 CVVFinal1) / (Affix2 CVVFinal2) / CCVCVFinal1 / CCVCVFinal2 / CVCCVFinal1a / CVCCVFinal1b / CVCCVFinal2 / (!((CVVStressed / StressedSyllable2)) Affix !((!(Peelable2) Affix1)) Borrowing !(((juncture)? [y]))))

Primitive = (CCVCVFinal1 / CCVCVFinal2 / CVCCVFinal1a / CVCCVFinal1b / CVCCVFinal2)

PreComplex = (ComplexTail / ((!((CVCStressed / CCVStressed / CVVStressed / ComplexTail / StressedSyllable2)) Affix) PreComplex))

Complex = (!((C1 V2 (juncture)? (V2)? (juncture)? (Primitive / PreComplex / Borrowing / CVV))) !((C1 V2 (juncture)? &(MaybeInitialCC) C1 (juncture)? &((PreComplex / ComplexTail)))) PreComplex)

Predicate = $((&(caprule) ((Primitive / Complex / Borrowing) ((([ ])* Z AO (', ')? ([ ])* Predicate))?)) / (C1 V2 (V2)? ([ ])* Z AO (comma)? ([ ])* Predicate))

__LWinit = (([ ])* !(Predicate) &(caprule)) { return null }

Oddvowel = ((juncture)? (((V2 (juncture)? V2 (juncture)?))* V2) (juncture)?)

__LWbreak = $(!(Oddvowel) !((!((([ ])* Predicate)) !((&(nonamemarkers) Name)) (A / ICI / ICA / IGE / I))) ((comma &((!((&(nonamemarkers) Name)) (V2 / A)))))?)

CANCELPAUSE = $(comma (('y' comma) / (C UU __LWbreak)))

PAUSE = ((!(CANCELPAUSE) comma !((A / ICI / ICA / IGE / I)) !((&(V2) Predicate))) !((([ ])* &(nonamemarkers) Name))) { return "," }

NOI = $(!(Predicate) N OI !(Oddvowel))

A0 = $(!(Predicate) ((([AEOUaeou] !([AEIOUaeiou])) / (H a)) (juncture)? !(Oddvowel)))

A = $(__LWinit (((N u) &((u / (N o)))))? ((N o))? A0 (NOI)? !((([ ])+ PA)) (PA)? ((!(Predicate) G u))? !(Oddvowel))

A1 = $(A __LWbreak)

ACI = $(A !((([ ])+ PA)) !(Predicate) C i __LWbreak)

AGE = $(A !((([ ])+ PA)) !(Predicate) G e __LWbreak)

CA0 = $((((N o))? !(Predicate) ((C a) / (C e) / (C o) / (C u) / (Z e) / (C i H a)) !(Oddvowel)) (NOI)?)

CA1 = $(!(Predicate) (((N u) &(((C u) / (N o)))))? ((N o))? CA0 !((([ ])+ PA)) (PA)? ((!(Predicate) G u))? !(Oddvowel))

CA = $(__LWinit &(caprule) CA1 __LWbreak)

ZE2 = $(__LWinit (Z e) __LWbreak)

I = $(__LWinit i !((([ ])+ PA)) (PA)? ((!(Predicate) G u))? __LWbreak)

ICA = $(__LWinit !(Predicate) i ((!(Predicate) H a) / CA1) __LWbreak)

ICI = $(__LWinit i (CA1)? !(Predicate) C i __LWbreak)

IGE = $(__LWinit i (CA1)? !(Predicate) G e __LWbreak)

KA0 = $(!(Predicate) (((K a) / (K e) / (K o) / (K u) / (K i H a)) !(Oddvowel)))

KOU = $(!(Predicate) (((K OU) / (M OI) / (R AU) / (S OA)) !(Oddvowel)))

KOU1 = $(((N u) / (N o) / (N u N o)) KOU)

KA = $(__LWinit &(caprule) (((((N u) &((K u))))? KA0) / ((KOU1 / KOU) K i)) (NOI)? __LWbreak)

KI = $(__LWinit (K i) (NOI)? __LWbreak)

NI0 = $(!(Predicate) (((K UA) / (G IE) / (G IU) / (H IE) / (H IU) / (K UE) / (N EA) / (N IO) / (P EA) / (P IO) / (S UU) / (S UA) / (T IA) / (Z OA) / (Z OI) / (H o) / (N i) / (N e) / (T o) / (T e) / (F o) / (F e) / (V o) / (V e) / (P i) / (R e) / (R u) / (S e) / (S o) / (H i)) !(Oddvowel)))

TAI0 = $(!(Predicate) (((V1 (juncture)? !(Predicate) !(Name) M a (juncture)?) / (V1 (juncture)? !(Predicate) !(Name) F i (juncture)?) / (C1 AI) / (C1 EI) / (C1 EO) / (Z i (juncture)? V1 (juncture)? ((M a))? (juncture)?)) !(Oddvowel)))

SA = $(!(Predicate) ((S a) / (S i) / (S u)) (NOI)? !(Oddvowel))

RA = $(!(Predicate) (((R a) / (R i) / (R o)) !(Oddvowel)))

NI1 = $((NI0 ((M a))? ((M OA (NI0)*))? !(Oddvowel)) (((comma2)? &(NI)))?)

IE1 = $(__LWinit IE __LWbreak)

NI2 = $((((SA)? ((NI1)+ / RA)) / SA) (NOI)? ((CA0 (((SA)? ((NI1)+ / RA)) / SA) (NOI)?))*)

NI = $(__LWinit (IE1)? NI2 ((&((M UE)) Acronym (comma / !(.) / &(period)) !((C u))))? ((C u))? !(Oddvowel))

mex = (__LWinit NI __LWbreak)

CI = $(__LWinit (C i) __LWbreak)

Acronym = $(([ ])* ((M UE) / TAI0 / ([Zz] V2 !(V2))) ((NI1 / TAI0 / ([Zz] V2 (!(V2) / ([Zz] &(V2))))))+)

TAI = $(__LWinit (TAI0 / ((G AO) !(V2) ([ ])* (Name / Predicate / (C1 V2 V2 (!(Oddvowel) / &(TAI0))) / (C1 V2 (!(Oddvowel) / &(TAI0)))))) __LWbreak)

DA0 = $(((T AO) / (T IO) / (T UA) / (M IO) / (M IU) / (M UO) / (M UU) / (T OA) / (T OI) / (T OO) / (T OU) / (T UO) / (T UU) / (S UO) / (H u) / (B a) / (B e) / (B o) / (B u) / (D a) / (D e) / (D i) / (D o) / (D u) / (M i) / (T u) / (M u) / (T i) / (T a) / (M o)) !(Oddvowel))

DA1 = $(!(Predicate) ((TAI0 / DA0) ((C i !([ ]) NI0))? !(Oddvowel)))

DA = $(__LWinit DA1 __LWbreak)

PA0 = $(!(Predicate) (((G IA) / (G UA) / (P IA) / (P UA) / (N IA) / (N UA) / (B IU) / (F EA) / (F IA) / (F UA) / (V IA) / (V II) / (V IU) / (C IU) / (C OI) / (D AU) / (D II) / (D UO) / (F OI) / (F UI) / (G AU) / (H EA) / (K AU) / (K II) / (K UI) / (L IA) / (L UI) / (M IA) / (M OU) / (N UI) / (P EU) / (R OI) / (R UI) / (S EA) / (S IO) / (T IE) / (V a) / (V i) / (V u) / (P a) / (N a) / (F a) / (V a) / KOU) !(Oddvowel)))

PA = $(!(Predicate) (((!(PA0) NI))? (((KOU1 / PA0) ((comma2 &((((CA0 (comma2)?))? PA))))?))+ (((CA0 (comma2)?) (((KOU1 / PA0) ((comma2 &((((CA0 (comma2)?))? PA))))?))+))* (ZI)? !(Oddvowel)))

PA2 = $((__LWinit PA __LWbreak) (freemod3)?)

GA = $(__LWinit (G a) __LWbreak)

PA1 = $(((PA2 / GA) __LWbreak) (freemod3)?)

ZI = $(!(Predicate) ((Z i) / (Z a) / (Z u)))

LE = $(__LWinit ((L EA) / (L EU) / (L OE) / (L EE) / (L AA) / (L e) / (L o) / (L a)) ((DA1 / TAI0))? !((([ ])+ PA)) (PA)? __LWbreak)

LA = $(__LWinit (L a) ((DA1 / TAI0))? !((([ ])+ PA)) (PA)? __LWbreak)

LEFORPO = $(__LWinit ((L e) / (L o) / NI2) __LWbreak)

LIO = $(__LWinit (L IO) __LWbreak)

LAU = $(__LWinit ((L AU) / (L OU)) __LWbreak)

LUA = $(__LWinit ((L UA) / (L UO)) __LWbreak)

LI1 = $(L i)

LU1 = $(L u)

Quotemod = $(((Z a) / (Z i)) !(Oddvowel))

LI = $(__LWinit LI1 !(V2) (Quotemod)? ((([,])? ([ ])+))? utterance0 (', ')? __LWinit LU1 __LWbreak)

stringnospaces = $(([,])? (([ ])+ ((!([ ,]) !(period) .))+) ((([,])? ([ ])+ &(letter)) / &(period) / !(.)))

LAO1 = $(L AO)

LAO = $(([ ])* (LAO1 stringnospaces (([y] stringnospaces))*))

LIE1 = $(L IE)

CII1 = $((C II) / [y])

LIE = $(([ ])* LIE1 ((!([ ]) NI0))? (Quotemod)? stringnospaces ((CII1 ((!([ ]) NI0))? stringnospaces))*)

LW = $(&(caprule) (((!(Predicate) V2 V2))+ / ((!(Predicate) (V2)? ((!(Predicate) LWunit))+) / V2)))

LIU0 = $((L IU) / (N IU))

LIU1 = $(__LWinit ((LIU0 !(V2) (Quotemod)? ((([,])? ([ ])+))? (Name / Predicate / (LW (([,] ([ ])+ !([,])) / &(period) / !(.) / &((([ ])* Predicate)))))) / (L II (Quotemod)? TAI __LWbreak)))

SUE = $(__LWinit ((S UE) / (S AO)) stringnospaces)

CUI = $(__LWinit (C UI) __LWbreak)

GA2 = $(__LWinit (G a) __LWbreak)

GE = $(__LWinit (G e) __LWbreak)

GEU = $(__LWinit ((C UE) / (G EU)) __LWbreak)

GI = $(__LWinit ((G i) / (G OI)) __LWbreak)

GO = $(__LWinit (G o) __LWbreak)

GU = $(__LWinit (G u) __LWbreak)

GUI = $(__LWinit (G UI) __LWbreak)

GUO = $(__LWinit (G UO) __LWbreak)

GUU = $(__LWinit (G UU) __LWbreak)

GUE = $(__LWinit (G UE) __LWbreak)

JE = $(__LWinit (J e) __LWbreak)

JUE = $(__LWinit (J UE) __LWbreak)

JI = $(__LWinit ((J IE) / (J AE) / (P e) / (J i) / (J a)) __LWbreak)

JIO = $(__LWinit ((J IO) / (J AO)) __LWbreak)

DIO = $(__LWinit ((B EU) / (C AU) / (D IO) / (F OA) / (K AO) / (J UI) / (N EU) / (P OU) / (G OA) / (S AU) / (V EU) / (Z UA) / (Z UE) / (Z UI) / (Z UO) / (Z UU) / (L AE) / (L UE)) __LWbreak)

DIO2 = $(__LWinit ((B EU) / (C AU) / (D IO) / (F OA) / (K AO) / (J UI) / (N EU) / (P OU) / (G OA) / (S AU) / (V EU) / (Z UA) / (Z UE) / (Z UI) / (Z UO) / (Z UU)) __LWbreak)

ME = $(__LWinit ((M EA) / (M e)) __LWbreak)

NU0 = $(((N UO) / (F UO) / (J UO) / (N u) / (F u) / (J u)) !(Oddvowel))

NU = $(__LWinit ((NU0 !((([ ])+ (NI0 / RA))) ((NI0 / RA))? (freemod)?))+ __LWbreak)

PO1 = $(__LWinit ((P o) / (P u) / (Z o)) !(Oddvowel))

POSHORT1 = $(__LWinit ((P OI) / (P UU) / (Z OO)) !(Oddvowel))

PO = $(__LWinit PO1 __LWbreak)

POSHORT = $(__LWinit POSHORT1 __LWbreak)

DIE = $(__LWinit ((D IE) / (F IE) / (K AE) / (N UE) / (R IE)) __LWbreak)

HOI = $(__LWinit (H OI) __LWbreak)

JO = $(__LWinit ((NI0 / RA))? (J o) __LWbreak)

KIE = $(__LWinit (K IE) __LWbreak)

KIU = $(__LWinit (K IU) __LWbreak)

SOI = $(__LWinit (S OI) __LWbreak)

UI0 = $((UA / UE / UI / UO / UU / OA / OE / OI / OU / OO / IA / II / IO / IU / EA / EE / EI / EO / EU / AA / AE / AI / AO / AU / (B EA) / (B UO) / (C EA) / (C IA) / (C OA) / (D OU) / (F AE) / (F AO) / (F EU) / (G EA) / (K UO) / (K UU) / (R EA) / (N AO) / (N IE) / (P AE) / (P IU) / (S AA) / (S UI) / (T AA) / (T OE) / (V OI) / (Z OU) / (L OI) / (L OA) / (S IA) / (S II) / (T OE) / (S IU) / (C AO) / (C EU) / (S IE) / (S EU)) !(Oddvowel))

NOUI = $((__LWinit (N o) ([ ])* !(Predicate) UI0 __LWbreak) / (__LWinit UI0 NOI __LWbreak))

UI1 = $(__LWinit (UI0 / (NI F i)) __LWbreak)

HUE = $(__LWinit (H UE) __LWbreak)

NO1 = $(__LWinit !(KOU1) !(NOUI) (N o) !((__LWinit KOU)) !((([ ])* (JIO / JI))) __LWbreak)

AcronymicName = $(Acronym (!(.) / ',' / &(period) / &(Name) / &(CI)))

DJAN = $(Name / AcronymicName)

BI = $(__LWinit ((N u))? ((B IA) / (B IE) / (C IE) / (C IO) / (B IA) / (B [i])) __LWbreak)

LWPREDA = $(((H e) / (D UA) / (D UI) / (B UA) / (B UI)) !(Oddvowel))

PREDA = $(([ ])* &(caprule) (Predicate / LWPREDA / (!([ ]) NI RA)) !((!((&(nonamemarkers) Name)) (A / ICI / ICA / IGE / I))) ((',' ([ ])+ &((!((&(nonamemarkers) Name)) (V2 / A)))))? (freemod2)?)

guo = $((PAUSE)? (GUO / GU) (freemod)?)
guo_elidible = ((PAUSE)? (a:(GUO / GU)? { return _elid("guo", a) }) (freemod)?)

gui = $((PAUSE)? (GUI / GU) (freemod)?)
gui_elidible = ((PAUSE)? (a:(GUI / GU)? { return _elid("gui", a) }) (freemod)?)

gue = $((PAUSE)? (GUE / GU) (freemod)?)
gue_elidible = ((PAUSE)? (a:(GUE / GU)? { return _elid("gue", a) }) (freemod)?)

guu = $((PAUSE)? (GUU / GU) (freemod)?)
guu_elidible = ((PAUSE)? (a:(GUU / GU)? { return _elid("guu", a) }) (freemod)?)

lua = LUA

geu = GEU

gap = ((PAUSE)? (a:GU? { return _elid("gu", a) }) (freemod)?)
gap_gu = ((PAUSE)? GU (freemod)?)

gap2 = gap

guu1_elidible = gap

juelink = (JUE (freemod)? term)

links1 = (juelink (((freemod2)? juelink))* gue_elidible)

links = ((links1 / (KA (freemod)? links (freemod)? KI (freemod)? links1)) (((freemod)? A1 (freemod)? links1))*)

jelink = (JE (freemod)? term)

linkargs1 = (jelink (freemod2)? (links)? gue_elidible)

linkargs = ((linkargs1 / (KA (freemod)? linkargs (freemod)? KI (freemod)? linkargs1)) (((freemod)? A1 (freemod)? linkargs1))*)

predunit1 = ((SUE / (NU (freemod)? GE (freemod)? despredE (((freemod)? geu (comma)?))?) / (NU (freemod)? PREDA) / ((comma)? GE (freemod)? descpred (((freemod)? geu (comma)?))?) / (PO (freemod)? uttAx guo_elidible) / (PO (freemod)? sentence guo_elidible) / (ME (freemod)? argument gap2) / PREDA) (freemod2)?)

predunit2 = (((NO1 (freemod)?))* predunit1)

NO2 = (!(predunit2) NO1)

predunit3 = ((predunit2 (freemod)? linkargs) / predunit2)

predunit = (((POSHORT (freemod2)?))? predunit3)

kekpredunit = (((NO1 (freemod)?))* KA (freemod)? predicate (freemod)? KI (freemod)? predicate)

despredA = ((predunit / kekpredunit) (((freemod)? CI (freemod)? (predunit / kekpredunit)))*)

despredB = ((!(PREDA) CUI (freemod)? despredC (freemod)? CA (freemod)? despredB) / despredA)

despredC = (despredB (((freemod2)? despredB))*)

despredD = (despredB (((freemod)? CA (freemod)? despredB))*)

despredE = (despredD (((freemod2)? despredD))*)

descpred = ((despredE (freemod)? GO (freemod)? descpred) / despredE)

senpred1 = (predunit (((freemod)? CI (freemod)? predunit))*)

senpred2 = (senpred1 / (CUI (freemod)? despredC (freemod)? CA (freemod)? despredB))

senpred3 = (senpred2 (((freemod)? CA (freemod)? despredB))*)

senpred4 = (senpred3 (((freemod)? despredD))*)

sentpred = ((senpred4 (freemod)? GO (freemod)? barepred) / senpred4)

mod1 = ((PA2 argument gap2) / (PA2 !(barepred) guu1_elidible))

kekmod = (((NO1 (freemod)?))* (KA (freemod)? modifier (freemod)? KI (freemod)? mod))

mod = (mod1 / (((NO1 (freemod)?))* mod1) / kekmod)

modifier = ((mod / kekmod) ((A1 (freemod)? mod))*)

namemarker = (([ ])* ((L a) / (H OI) / (C i) / (H UE) / (L IU) / (G AO)))

nonamemarkers = (([ ])* ((!((namemarker DJAN)) Letter))+ !(Letter))

name = ((DJAN (((([ ])* (freemod)? CI ((',' ([ ])+))? DJAN) / ((([ ])* (freemod)? CI (freemod)? predunit) !((&(nonamemarkers) !(AcronymicName) DJAN))) / (&(nonamemarkers) !(AcronymicName) DJAN)))*) (freemod)?)

LA0 = (L a)

LANAME = (([ ])* LA0 ((',' ([ ])+))? name gap2)

HOI0 = (H OI)

voc = ((([ ])* HOI0 ((',' ([ ])+))? name gap2) / (HOI (freemod3)? descpred gap2) / (HOI (freemod3)? argument gap2) / (HOI gap))

descriptn = (!(LANAME) ((LE (freemod)? descpred) / (LE (freemod)? mex (freemod)? descpred) / (LE (freemod)? arg1 descpred) / (LE (freemod)? mex (freemod)? arg1a) / (GE (freemod)? mex (freemod)? descpred)))

arg1 = ((LEFORPO (freemod)? PO (freemod)? uttAx guo_elidible) / (LEFORPO (freemod)? PO (freemod)? sentence guo_elidible) / (LIO (freemod)? descpred gap2) / (LIO (freemod)? term gap2) / (LIO (freemod)? mex gap2) / LAO / LANAME / (descriptn (freemod2)? (((((comma)? CI (comma)?) / (comma &(nonamemarkers) !(AcronymicName))) name))? gap2) / LIU1 / LIE / LI)

arg1a = ((DA / TAI / arg1 / (GE (freemod)? arg1a)) (freemod2)?)

argmod1 = (((__LWinit (N o) ([ ])*))? ((JI (freemod)? predicate gui_elidible) / (JIO (freemod)? sentence gui_elidible) / (JIO (freemod)? uttAx gui_elidible) / (JI (freemod)? modifier gui_elidible) / (JI (freemod)? argument gui_elidible)))

argmod = (argmod1 ((A1 (freemod)? argmod1))*)

arg2 = (arg1a ((argmod gap2))*)

arg3 = (arg2 / (mex (freemod)? arg2))

indef1 = (mex (freemod)? descpred)

indef2 = (indef1 gap2 ((argmod gap2))*)

indefinite = indef2

arg4 = ((arg3 / indefinite) ((ZE2 (freemod)? (arg3 / indefinite)))*)

arg5 = (arg4 / (KA (freemod)? argument (freemod)? KI (freemod)? argx))

arg6 = (arg5 / (DIO (freemod)? arg6) / (IE1 (freemod)? arg6))

argx = (((NO1 (freemod)?))* arg6)

arg7 = (argx ((ACI (freemod)? arg7))?)

arg8 = (!(GE) (arg7 ((A1 (freemod)? arg7))*))

argument = (((LAU wordset) / (arg8 AGE (freemod)? argument) / arg8) ((GUU (freemod)? argmod gap2))*)

term = (argument / modifier)

terms = (term (((freemod)? term))*)

terms2 = (term (((freemod2)? term))*)

modifiers = (modifier (((freemod)? modifier))*)

word = ((arg1a gap) / (UI1 gap) / (NI gap) / (PA2 gap) / (DIO gap) / (predunit1 gap) / indef2)

words = (word)+

wordset = ((words)? lua)

termset1 = ((terms2 guu_elidible) / (KA (freemod)? termset2 (freemod)? KI (freemod)? termset1))

termset2 = (termset1 ((A1 (freemod)? termset1))*)

termset = ((terms2 (freemod)? GO (freemod)? barepred) / termset2 / guu)

kekpred = (kekpredunit (((freemod2)? despredD))*)

barepred = ((sentpred (freemod2)? (termset)?) / (kekpred (freemod2)? (termset)?))

markpred = (PA1 barepred)

backpred1 = (((NO2 (freemod)?))* (barepred / markpred))

backpred = (((backpred1 ((ACI (freemod)? backpred1))+ (freemod2)? (termset)?) ((((ACI (freemod)? backpred))+ (freemod2)? (termset)?))?) / backpred1)

predicate2 = (!(GE) (((backpred ((A1 !(GE) (freemod)? backpred))+ (freemod2)? (termset)?) ((((A1 (freemod)? predicate2))+ (freemod2)? (termset)?))?) / backpred))

predicate1 = ((predicate2 AGE (freemod)? predicate1) / predicate2)

identpred = (((NO1 (freemod)?))* (BI (freemod)? termset))

predicate = (predicate1 / identpred)

oneargument = (((modifiers (freemod)?))? argument ((modifiers (freemod)?))?)

gasent1 = (((NO1 (freemod)?))* (PA1 (freemod)? barepred ((GA2 (freemod)? oneargument))?))

gasent2 = (((NO1 (freemod)?))* (PA1 (freemod)? sentpred (modifiers)? (GA2 (freemod)? terms)))

gasent = (gasent2 / gasent1)

statement = (gasent / (modifiers (freemod)? gasent) / (terms (freemod)? predicate))

keksent = (((NO1 (freemod)?))* ((KA (freemod)? sentence (freemod)? KI (freemod)? uttA1) / (KA sentence (freemod)? KI (freemod)? uttA1) / (KA (freemod)? headterms (freemod)? sentence (freemod)? KI (freemod)? uttA1)))

sen1 = ((modifiers (freemod)? !(gasent) predicate) / statement / predicate / keksent)

sentence = (sen1 ((ICA (freemod)? sen1))*)

headterms = ((terms GI))+

uttAx = (headterms (freemod)? sentence gap2)

freemod = ((NOUI / UI1 / (SOI (freemod)? descpred gap2) / DIE / (NO1 DIE) / (KIE utterance0 KIU) / (([ ])* (H UE) ((',' ([ ])+))? name gap2) / (HUE (freemod)? statement gap2) / (HUE (freemod)? terms gap2) / voc / CANCELPAUSE / PAUSE / JO) (freemod)?)

freemod2 = freemod

freemod3 = freemod

uttA = ((A1 / IE1 / mex) (freemod2)?)

uttA1 = ((sen1 / uttAx / NO1 / links / linkargs / argmod / (terms (freemod)? keksent) / terms / uttA) (period)?)

neghead = (NO1 (gap_gu / PAUSE))

uttC = ((neghead uttC) / uttA1)

uttD = (uttC ((ICI (freemod)? uttD))*)

uttE = (uttD ((ICA (freemod)? uttD))*)

uttF = (uttE ((I (freemod)? uttF))*)

utterance0 = (!(GE) ((!(PAUSE) freemod2 (period)? utterance0) / (!(PAUSE) freemod2 (period)?) / (uttE IGE utterance0) / (I (freemod)?) / uttF / (I (freemod)? uttF) / (ICA (freemod)? uttF)))



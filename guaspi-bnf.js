var camxes = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "C": parse_C,
        "Cseq": parse_Cseq,
        "V": parse_V,
        "Vseq": parse_Vseq,
        "space": parse_space,
        "Word": parse_Word,
        "Compound": parse_Compound,
        "Sametone": parse_Sametone,
        "Down1": parse_Down1,
        "Up1": parse_Up1,
        "fi": parse_fi,
        "fu": parse_fu,
        "i": parse_i,
        "Prefix": parse_Prefix,
        "Primitive": parse_Primitive,
        "Phrase": parse_Phrase,
        "Phrase_w": parse_Phrase_w,
        "Phrase0": parse_Phrase0,
        "Args0": parse_Args0,
        "Args1": parse_Args1,
        "Args2": parse_Args2,
        "Args3": parse_Args3,
        "Args4": parse_Args4,
        "Afterargs": parse_Afterargs,
        "After1": parse_After1,
        "Preargs": parse_Preargs,
        "Sentstart": parse_Sentstart,
        "Sentend": parse_Sentend,
        "Sentence": parse_Sentence,
        "Nonsentence": parse_Nonsentence,
        "Unit": parse_Unit,
        "Discourse": parse_Discourse
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Discourse";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_C() {
        var cacheKey = "C@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[:bcdfgjkpqstvxz]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[:bcdfgjkpqstvxz]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Cseq() {
        var cacheKey = "Cseq@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_C();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_C();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, a) { return a.join("") })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_V() {
        var cacheKey = "V@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[aeiouyrmnlw]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[aeiouyrmnlw]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Vseq() {
        var cacheKey = "Vseq@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_V();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_V();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, a) { return a.join("") })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = "space@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Word() {
        var cacheKey = "Word@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Cseq();
        if (result0 !== null) {
          result1 = parse_Vseq();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c, v) { return c+v })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Compound() {
        var cacheKey = "Compound@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[\-=]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\-=]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Sametone() {
        var cacheKey = "Sametone@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos) === 94) {
          result0 = "^";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"^\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Down1() {
        var cacheKey = "Down1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[!\\|]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[!\\\\|]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Up1() {
        var cacheKey = "Up1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos) === 47) {
          result0 = "/";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fi() {
        var cacheKey = "fi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        if (input.substr(pos, 2) === "fi") {
          result0 = "fi";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"fi\"");
          }
        }
        if (result0 !== null) {
          pos4 = pos;
          reportFailures++;
          result1 = parse_V();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos4;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos2;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_Word();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) { return w })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fu() {
        var cacheKey = "fu@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        if (input.substr(pos, 2) === "fu") {
          result0 = "fu";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"fu\"");
          }
        }
        if (result0 !== null) {
          pos4 = pos;
          reportFailures++;
          result1 = parse_V();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos4;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos2;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_Word();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) { return w })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_i() {
        var cacheKey = "i@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        if (input.charCodeAt(pos) === 58) {
          result0 = ":";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          if (/^[aeiou]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[aeiou]");
            }
          }
          if (result1 !== null) {
            pos4 = pos;
            reportFailures++;
            result2 = parse_V();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos4;
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos3;
              }
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos2;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_Word();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) { return w })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Prefix() {
        var cacheKey = "Prefix@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        pos4 = pos;
        if (input.charCodeAt(pos) === 102) {
          result0 = "f";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"f\"");
          }
        }
        if (result0 !== null) {
          if (/^[aelnory]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[aelnory]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos4;
          }
        } else {
          result0 = null;
          pos = pos4;
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "qo") {
            result0 = "qo";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"qo\"");
            }
          }
          if (result0 === null) {
            pos4 = pos;
            if (input.charCodeAt(pos) === 122) {
              result0 = "z";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"z\"");
              }
            }
            if (result0 !== null) {
              if (/^[aeilmoruy]/.test(input.charAt(pos))) {
                result1 = input.charAt(pos);
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[aeilmoruy]");
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos4;
              }
            } else {
              result0 = null;
              pos = pos4;
            }
            if (result0 === null) {
              pos4 = pos;
              if (input.charCodeAt(pos) === 115) {
                result0 = "s";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"s\"");
                }
              }
              if (result0 !== null) {
                if (/^[aeioru]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[aeioru]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos4;
                }
              } else {
                result0 = null;
                pos = pos4;
              }
              if (result0 === null) {
                if (input.substr(pos, 2) === "fw") {
                  result0 = "fw";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"fw\"");
                  }
                }
                if (result0 === null) {
                  pos4 = pos;
                  if (input.charCodeAt(pos) === 118) {
                    result0 = "v";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"v\"");
                    }
                  }
                  if (result0 !== null) {
                    if (/^[aeiou]/.test(input.charAt(pos))) {
                      result1 = input.charAt(pos);
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("[aeiou]");
                      }
                    }
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos4;
                    }
                  } else {
                    result0 = null;
                    pos = pos4;
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 2) === "qu") {
                      result0 = "qu";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"qu\"");
                      }
                    }
                    if (result0 === null) {
                      pos4 = pos;
                      if (input.charCodeAt(pos) === 118) {
                        result0 = "v";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"v\"");
                        }
                      }
                      if (result0 !== null) {
                        if (/^[ylrn]/.test(input.charAt(pos))) {
                          result1 = input.charAt(pos);
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("[ylrn]");
                          }
                        }
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = pos4;
                        }
                      } else {
                        result0 = null;
                        pos = pos4;
                      }
                      if (result0 === null) {
                        pos4 = pos;
                        if (input.charCodeAt(pos) === 120) {
                          result0 = "x";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"x\"");
                          }
                        }
                        if (result0 !== null) {
                          if (/^[aeinoruwy]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("[aeinoruwy]");
                            }
                          }
                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = pos4;
                          }
                        } else {
                          result0 = null;
                          pos = pos4;
                        }
                        if (result0 === null) {
                          pos4 = pos;
                          if (input.charCodeAt(pos) === 98) {
                            result0 = "b";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"b\"");
                            }
                          }
                          if (result0 !== null) {
                            if (/^[inu]/.test(input.charAt(pos))) {
                              result1 = input.charAt(pos);
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("[inu]");
                              }
                            }
                            if (result1 !== null) {
                              result0 = [result0, result1];
                            } else {
                              result0 = null;
                              pos = pos4;
                            }
                          } else {
                            result0 = null;
                            pos = pos4;
                          }
                          if (result0 === null) {
                            pos4 = pos;
                            if (input.charCodeAt(pos) === 113) {
                              result0 = "q";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"q\"");
                              }
                            }
                            if (result0 !== null) {
                              if (/^[aeilry]/.test(input.charAt(pos))) {
                                result1 = input.charAt(pos);
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[aeilry]");
                                }
                              }
                              if (result1 !== null) {
                                result0 = [result0, result1];
                              } else {
                                result0 = null;
                                pos = pos4;
                              }
                            } else {
                              result0 = null;
                              pos = pos4;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          pos4 = pos;
          reportFailures++;
          result1 = parse_V();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos4;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos2;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_Word();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) { return w })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Primitive() {
        var cacheKey = "Primitive@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Compound();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_fi();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_fu();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_Prefix();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result4 = parse_Word();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c, w) { return c ? c+w : w })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Phrase() {
        var cacheKey = "Phrase@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Prefix();
        if (result0 !== null) {
          result1 = parse_Args0();
          if (result1 !== null) {
            result2 = parse_Phrase();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_Phrase_w();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Phrase_w() {
        var cacheKey = "Phrase_w@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_Primitive();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_Primitive();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, p) { return p.join(" ") })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Phrase0() {
        var cacheKey = "Phrase0@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Phrase();
        if (result0 !== null) {
          result1 = parse_Down1();
          if (result1 !== null) {
            result2 = parse_Args1();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_Phrase();
          if (result0 !== null) {
            result1 = parse_Sametone();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Args0() {
        var cacheKey = "Args0@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Down1();
        if (result0 !== null) {
          result1 = parse_Args1();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_Compound();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Args1() {
        var cacheKey = "Args1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_Phrase0();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Phrase0();
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_Phrase();
          if (result1 !== null) {
            result2 = parse_Up1();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_Phrase();
            if (result1 !== null) {
              result2 = parse_Down1();
              if (result2 !== null) {
                result3 = parse_Args2();
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Args2() {
        var cacheKey = "Args2@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_Phrase0();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Phrase0();
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_Phrase();
          if (result1 !== null) {
            result2 = parse_Down1();
            if (result2 !== null) {
              result3 = parse_fu();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_Phrase();
            if (result1 !== null) {
              result2 = parse_Up1();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              result1 = parse_Phrase();
              if (result1 !== null) {
                result2 = parse_Down1();
                if (result2 !== null) {
                  result3 = parse_Args3();
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Args3() {
        var cacheKey = "Args3@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_Phrase0();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Phrase0();
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_Phrase();
          if (result1 !== null) {
            result2 = parse_Down1();
            if (result2 !== null) {
              result3 = parse_fu();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_Phrase();
            if (result1 !== null) {
              result2 = parse_Up1();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              result1 = parse_Phrase();
              if (result1 !== null) {
                result2 = parse_Down1();
                if (result2 !== null) {
                  result3 = parse_Args4();
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Args4() {
        var cacheKey = "Args4@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_Phrase0();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Phrase0();
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_Phrase();
          if (result1 !== null) {
            result2 = parse_Down1();
            if (result2 !== null) {
              result3 = parse_fu();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Afterargs() {
        var cacheKey = "Afterargs@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_Phrase0();
        if (result1 === null) {
          pos1 = pos;
          result1 = parse_Phrase();
          if (result1 !== null) {
            result2 = parse_Down1();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Phrase0();
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_Phrase();
            if (result1 !== null) {
              result2 = parse_Down1();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
        }
        if (result0 !== null) {
          result1 = parse_Phrase();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_After1() {
        var cacheKey = "After1@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_Afterargs();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_Down1();
          if (result2 !== null) {
            result3 = parse_fi();
            if (result3 !== null) {
              result4 = parse_Compound();
              if (result4 !== null) {
                result5 = parse_After1();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          if (result2 === null) {
            pos1 = pos;
            result2 = parse_Compound();
            if (result2 !== null) {
              result3 = parse_fi();
              if (result3 !== null) {
                result4 = parse_Down1();
                if (result4 !== null) {
                  result5 = parse_After1();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_Down1();
            if (result2 !== null) {
              result3 = parse_fi();
              if (result3 !== null) {
                result4 = parse_Compound();
                if (result4 !== null) {
                  result5 = parse_After1();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 === null) {
              pos1 = pos;
              result2 = parse_Compound();
              if (result2 !== null) {
                result3 = parse_fi();
                if (result3 !== null) {
                  result4 = parse_Down1();
                  if (result4 !== null) {
                    result5 = parse_After1();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = pos1;
                    }
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Preargs() {
        var cacheKey = "Preargs@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Down1();
        if (result0 !== null) {
          result1 = parse_After1();
          if (result1 !== null) {
            result2 = parse_Up1();
            if (result2 !== null) {
              result3 = parse_fi();
              if (result3 !== null) {
                result4 = parse_Preargs();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_Down1();
          if (result0 !== null) {
            result1 = parse_After1();
            if (result1 !== null) {
              result2 = parse_Down1();
              if (result2 !== null) {
                result3 = parse_fi();
                if (result3 !== null) {
                  result4 = parse_Up1();
                  if (result4 !== null) {
                    result5 = parse_Args1();
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
          if (result0 === null) {
            result0 = parse_Args0();
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Sentstart() {
        var cacheKey = "Sentstart@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Sametone();
        if (result0 !== null) {
          result1 = parse_i();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s, i) { return s+i })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Sentend() {
        var cacheKey = "Sentend@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_Phrase();
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_Down1();
          if (result1 !== null) {
            result2 = parse_After1();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Sentence() {
        var cacheKey = "Sentence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Sentstart();
        if (result0 !== null) {
          result1 = parse_Preargs();
          if (result1 !== null) {
            result2 = parse_Sentend();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Nonsentence() {
        var cacheKey = "Nonsentence@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Sentstart();
        if (result0 !== null) {
          result1 = parse_Down1();
          if (result1 !== null) {
            result2 = parse_Sentend();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Unit() {
        var cacheKey = "Unit@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_Sentence();
        if (result0 === null) {
          result0 = parse_Nonsentence();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Discourse() {
        var cacheKey = "Discourse@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        
        result1 = parse_Unit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_Unit();
          }
        } else {
          result0 = null;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        function _join(arg)
        {
          if (typeof(arg) == "string")
            return arg;
          else
          {
            ret = "";
            for (v in arg) { ret += _join(arg[v]); }
            return ret;
          }
        }
      
        function _node(label, arg)
        {
          var ret = [];
          if (label != undefined) ret.push( label );
          if (typeof( arg ) == "object" && typeof( arg[0] ) == "string" && arg[0] != "")
          {
            ret.push( arg );
            return ret;
          }
          return _node_int(label, arg);
        } 
      
        function _node_int(label, arg)
        {
          if (typeof( arg ) == "string")
            return arg;
          var ret = [];
          if (label != undefined) ret.push( label );
          for (v in arg)
          {
            if (arg[v].length != 0)
              ret.push( _node_int( undefined, arg[v] ) );
          }
          return ret;
        }
       
        function _node2(label, arg1, arg2)
        {
          return [label].concat(_node(arg1)).concat(_node(arg2));
        }
      
        function _node_nonempty(label, arg)
        {
          var _n = _node(label, arg);
          return (_n.length == 1 && _n[0] == label) ? [] : _n;
        }
        
        // === ZOI functions === //
      
        function _zoi_assign_delim(word) {
      	var a = word.toString().split(",");
      	if (a.length > 0) _g_zoi_delim = a[a.length - 1];
      	else _g_zoi_delim = "";
      	return word;
        }
      
        function _zoi_check_quote(word) {
      	if (typeof(word) == "object") word = word.toString();
          if (!is_string(word)) {
      	  alert("ZOI word is not a string");
      	  return false;
      	} else {
            return (word.replace(/,/gm,"") === _g_zoi_delim);
      	}
        }
        
        function _zoi_check_delim(word) {
      	if (typeof(word) == "object") word = word.toString();
          if (!is_string(word)) {
      	  alert("ZOI word is not a string");
      	  return false;
      	} else {
      	  word = word.split(",");
      	  if (word.length > 0) word = word[word.length - 1];
      	  else word = "";
            return (word === _g_zoi_delim);
      	}
        }
        
        function is_string(v) {
          return typeof v.valueOf() === 'string';
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()

module.exports = camxes;

term = process.argv[2];
if (term !== undefined && typeof term.valueOf() === 'string')
  console.log(JSON.stringify(camxes.parse(term)));


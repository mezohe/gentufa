"use strict";

var arrays  = require("../../utils/arrays"),
    GrammarError = require("../../grammar-error"),
    objects  = require("../../utils/objects"),
    visitor = require("../visitor");

/*
 * Materializes instances of rule templates and removes the templates themselves.
 *
 * For example, given a template called as Template<arg1 arg2>, an instance
 * called Template$arg1$arg2 is created.
 */
function materializeTemplates(ast, options) {

  var isTemplate = rule => rule.type === "rule"
                           && 'parameters' in rule
                           && rule.parameters.length;
  var templates = ast.rules.filter(isTemplate)
                           .reduce((obj, rule) =>
                                   Object.assign(obj, {[rule.name]: rule}), {});
  var concreteRules = ast.rules.filter(rule => !isTemplate(rule));
  ast.rules.splice(0, ast.rules.length, ...concreteRules);

  var materialized = {};

  var visitCalls = visitor.build({
    rule_ref: function (ref) {
      if ('args' in ref && ref.args.length) {
        ref.name = materialize(ref.name, ref.args, ref.location);
        ref.args = [];
      }
    }
  });

  function hasProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  function makeDefaultMap(obj) {
    return param => hasProperty(obj, param)
      ? obj[param] : param;
  }

  function materialize(template, args, location) {
    var name = template + "$" + args.join("$");
    if (hasProperty(materialized, name))
      return name;

    if (!hasProperty(templates, template))
      throw new GrammarError(template + " is not a template", location);

    var instance = JSON.parse(JSON.stringify(templates[template]));
    var paramArgs = {};
    for (var i = 0; i < args.length; i++)
      paramArgs[instance.parameters[i]] = args[i];
    var paramArgMap = makeDefaultMap(paramArgs);
    instance.name = name;
    instance.parameters = [];

    var visitUses = visitor.build({
      rule_ref: function (ref) {
        ref.name = paramArgMap(ref.name);
        ref.args = ref.args.map(paramArgMap);
      }
    });
    visitUses(instance);
    materialized[name] = instance;
    visitCalls(instance);
    return name;
  }

  visitCalls(ast);
  // console.dir(materialized, {depth: null});
  ast.rules.splice(-1, 0, ...Object.values(materialized));

}

module.exports = materializeTemplates;
